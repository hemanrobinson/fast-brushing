{"version":3,"sources":["Data.js","Axis.js","Plot.js","Matrix.js","becker.png","cleveland.png","App.js","index.js"],"names":["Data","props","selectedRows","deselectAll","getColumnNames","getDomain","nData","index","d3","getValues","d","values","length","f","i","a","b","Math","sin","Axis","draw","x","y","width","height","canvas","g","getContext","columnNames","fillStyle","font","s","fillText","measureText","round","Plot","padding","imageData","undefined","normalize","rect","nx","ny","nw","nh","isWithin","point","tol","nRect","j","scaled","opacity","scaledi","scaledj","nRows","data","nBytes","deselectedImageData","createImageData","forEach","datum","row","xScaled","k","fill","myImageData","set","m","putImageData","select","brush","xMin","floor","min","xMax","max","yMin","yMax","yScaled","push","Matrix","ref","useRef","nColumns","totalWidth","totalHeight","scale","Uint16Array","domain","range","useEffect","current","childNodes","node","svg","selectAll","remove","cell","append","join","attr","debouncedDraw","func","wait","timeout","args","clearTimeout","setTimeout","debounce","extent","on","event","sourceEvent","target","parentNode","brushNode","call","move","selection","offsetX","offsetY","xDown","yDown","xUp","yUp","touches","touch","clientX","getBoundingClientRect","clientY","brushNodeOffset","bitmaps","firstChild","clear","isDrawingAll","clearRect","strokeStyle","moveTo","lineTo","stroke","isFirstDraw","App","useState","getPower","setNData","setOpacity","className","Slider","defaultValue","step","valueLabelDisplay","marks","valueLabelFormat","value","onChange","href","title","alt","src","becker","cleveland","exp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c15c2b8d.chunk.js","sourcesContent":["import * as d3 from 'd3';\n\n/**\n * Data sets.\n *\n * @param  {Object}  props  properties\n * @return component\n */\nconst Data = ( props ) => {\n};\n \n/**\n * Array of indices of selected rows.\n *\n * @type {number[]}\n */\nData.selectedRows = [];\n\n/**\n * Deselects all rows.\n */\nData.deselectAll = () => {\n    Data.selectedRows = [];\n};\n\n/**\n * Returns column names.\n *\n * @return {string[]}  column names\n */\nData.getColumnNames = () => {\n    return [ \"A\", \"B\", \"A * B\", \"sin( A / B )\"];\n};\n\n/**\n * Returns domain of specified column.\n *\n * @param  {number}    nData  number of data values\n * @param  {number}    index  column index\n * @return {number[]}  domain of specified column\n */\nData.getDomain = ( nData, index ) => {\n  return [ d3.min( Data.getValues( nData ), d => d[ index ]), d3.max( Data.getValues( nData ), d => d[ index ])];\n};\n\n/**\n * Data values.\n *\n * @type {number[]}\n */\nData.values = [];\n\n/**\n * Returns data values.\n *\n * @param  {number}  nData  number of data values\n * @return {Array[]}  data values by row\n */\nData.getValues = ( nData ) => {\n    if( Data.values.length !== nData ) {\n        let f = d3.randomNormal( 0, 0.5 );\n        Data.values = [];\n        for( let i = 0; ( i < nData ); i++ ) {\n            let a = f(), b = f();\n            Data.values[ i ] = [ a, b, a * b, ( b === 0 ) ? 0 : Math.sin( a / b )];\n        }\n    }\n    return Data.values;\n};\n\nexport default Data;\n","import Data from './Data';\n\n/**\n * Axis for scatter plot matrix in an SVG element.\n *\n * @param  {Object}  props  properties\n * @return component\n */\nconst Axis = ( props ) => {\n};\n\n/**\n * Draws the axis.\n *\n * @param  {number}  x        X coordinate, in pixels\n * @param  {number}  y        Y coordinate, in pixels\n * @param  {number}  width    width, in pixels\n * @param  {number}  height   height, in pixels\n * @param  {Element} canvas   CANVAS element\n * @param  {number}  nData    number of data values\n * @param  {number}  index    column index\n */\nAxis.draw = ( x, y, width, height, canvas, nData, index ) => {\n    \n    // Initialization.\n    let g = canvas.getContext( \"2d\" ),\n        columnNames = Data.getColumnNames();\n        \n    // Draw the column label.\n    g.fillStyle = \"#000000\";\n    g.font = \"14px Verdana\";\n    let s = columnNames[ index ];\n    g.fillText( s, x + width / 2 - g.measureText( s ).width / 2, y + height - height / 2 + 4 );\n    \n    // Draw the minimum and maximum.\n    g.font = \"12px Verdana\";\n    s = \"\" + Math.round( 10 * Data.getDomain( nData, index )[ 0 ]) / 10;\n    g.fillText( s, x + 4, y + height - 4 );\n    s = \"\" + Math.round( 10 * Data.getDomain( nData, index )[ 1 ]) / 10;\n    g.fillText( s, x + width - 3 - g.measureText( s ).width, y + 12 );\n};\n\nexport default Axis;\n","import Data from './Data';\n\n/**\n * Scatter plot in an SVG element.\n *\n * @param  {Object}  props  properties\n * @return component\n */\nconst Plot = ( props ) => {\n};\n \n/**\n * Padding, in pixels.\n *\n * @constant {number}\n */\nPlot.padding = 10;\n\n/**\n * Cached bitmap, or none iff undefined.\n *\n * @constant {ImageData|undefined}\n */\nPlot.imageData = undefined;\n    \n/**\n * Returns normalized rectangle.\n *\n * @param   {Rect}  rect   rectangle\n * @return  {Rect}  normalized rectangle\n */\nPlot.normalize = ( rect ) => {\n    let nx = rect.x,\n        ny = rect.y,\n        nw = rect.width,\n        nh = rect.height;\n    if( nw < 0 ) {\n        nx += nw;\n        nw = -nw;\n    }\n    if( nh < 0 ) {\n        ny += nh;\n        nh = -nh;\n    }\n    return { x: nx, y: ny, width: nw, height: nh };\n}\n\n/**\n * Returns whether point is within rectangle, within tolerance.\n *\n * @param  {Point}   point  point\n * @param  {Rect}    rect   rectangle\n * @param  {number}  tol    tolerance, or 0 for undefined\n */\nPlot.isWithin = ( point, rect, tol ) => {\n    let nRect = Plot.normalize( rect );\n    if( tol !== undefined ) {\n        nRect.x -= tol;\n        nRect.y -= tol;\n        nRect.width += 2 * tol;\n        nRect.height += 2 * tol;\n    }\n    return ( nRect.x <= point.x ) && ( point.x < nRect.x + nRect.width  ) &&\n           ( nRect.y <= point.y ) && ( point.y < nRect.y + nRect.height );\n}\n\n/**\n * Draws the plot.\n *\n * @param  {number}               x             X coordinate, in pixels\n * @param  {number}               y             Y coordinate, in pixels\n * @param  {number}               width         width, in pixels\n * @param  {number}               height        height, in pixels\n * @param  {number}               i             X column index\n * @param  {number}               j             Y column index\n * @param  {number[][]}           scaled        scaled coordinates\n * @param  {Element}              canvas        CANVAS element\n * @param  {number}               opacity       alpha\n * @param  {number[]}             selectedRows  indices of selected rows\n * @param  {ImageData|undefined}  imageData     bitmap of deselected points, or undefined if none\n * @return {ImageData}            bitmap of deselected points\n */\nPlot.draw = ( x, y, width, height, i, j, scaled, canvas, opacity, selectedRows, imageData ) => {\n    \n    // Initialization.\n    const g = canvas.getContext( \"2d\" ),\n        padding = Plot.padding,\n        scaledi = scaled[ i ],\n        scaledj = scaled[ j ],\n        nRows = scaledi.length,\n        data = Data.getValues( nRows ),\n        nBytes = width * height * 4;\n    let deselectedImageData = imageData;\n        \n    // Create the deselected bitmap if necessary.\n    // For alpha blending, see e.g. https://en.wikipedia.org/wiki/Alpha_compositing#Alpha_blending.\n    if( deselectedImageData === undefined ) {\n        deselectedImageData = g.createImageData( width, height );                           // black and transparent\n        const d = deselectedImageData.data;\n        data.forEach(( datum, row ) => {\n            let xScaled = scaledi[ row ],\n                yScaled = height - scaledj[ row ],\n                k = ( yScaled * width + xScaled ) * 4;\n            if(( 0 <= k ) && ( k + 3 < nBytes )) {\n                d[ k     ] = Math.round(             0 + d[ k     ] * ( 1 - opacity ));     // r\n                d[ k + 1 ] = Math.round(             0 + d[ k + 1 ] * ( 1 - opacity ));     // g\n                d[ k + 2 ] = Math.round(             0 + d[ k + 2 ] * ( 1 - opacity ));     // b\n                d[ k + 3 ] = Math.round( 255 * opacity + d[ k + 3 ] * ( 1 - opacity ));     // alpha\n            }\n        });\n    }\n    \n    // Copy the deselected bitmap.  Caching minimizes use of createImageData().\n    if( !Plot.imageData || ( Plot.imageData.data.length !== nBytes )) {\n        Plot.imageData = g.createImageData( width, height );                                // black and transparent\n    } else {\n        Plot.imageData.data.fill( 0, 0, nBytes );                                           // black and transparent\n    }\n    const myImageData = Plot.imageData;\n    const d = myImageData.data;\n    d.set( deselectedImageData.data );\n    \n    // Add the selected rows as specified.\n    // Selected rows use opacity, but not alpha blending, in order to keep them bright.  TODO:  Explore alternatives to this.\n    for( let m = 0; ( m < selectedRows.length ); m++ ) {\n        let row = selectedRows[ m ],\n            xScaled = scaledi[ row ],\n            yScaled = height - scaledj[ row ],\n            k = ( yScaled * width + xScaled ) * 4;\n        if(( 0 <= k ) && ( k + 3 < nBytes )) {\n            d[ k ] = Math.round( 255 + d[ k ] * ( 1 - opacity ));                           // r\n        }\n    }\n    \n    // Draw and return the bitmap.\n    g.putImageData( myImageData, x, y, padding, padding, width - 2 * padding, height - 2 * padding );\n    return deselectedImageData;\n};\n\n/**\n * Selects rows within the brush and returns them.\n *\n * @param  {number}     x       X coordinate, in pixels\n * @param  {number}     y       Y coordinate, in pixels\n * @param  {number}     width   width, in pixels\n * @param  {number}     height  height, in pixels\n * @param  {number}     i       X column index\n * @param  {number}     j       Y column index\n * @param  {number[][]} scaled  scaled coordinates\n * @param  {Rect}       brush   brush\n * @return {number[]}   indices of selected rows\n */\nPlot.select = ( x, y, width, height, i, j, scaled, brush ) => {\n    \n    // Initialization.\n    let selectedRows = [];\n    const scaledi = scaled[ i ],\n        scaledj = scaled[ j ],\n        nRows = scaledi.length,\n        xMin = Math.floor( Math.min( brush.x, brush.x + brush.width ) - x ),\n        xMax = Math.floor( Math.max( brush.x, brush.x + brush.width ) - x ),\n        yMin = height - Math.floor( Math.max( brush.y, brush.y + brush.height ) - y ),\n        yMax = height - Math.floor( Math.min( brush.y, brush.y + brush.height ) - y );\n    \n    // Collect the selected row indices and return them.\n    for( let row = 0; ( row < nRows ); row++ ) {\n        let xScaled = scaledi[ row ],\n            yScaled = scaledj[ row ];\n        if(( xMin <= xScaled ) && ( xScaled < xMax ) && ( yMin < yScaled ) && ( yScaled <= yMax )) {\n            selectedRows.push( row );\n        }\n    };\n    return selectedRows;\n};\n\nexport default Plot;\n","import React, { useRef, useEffect }  from 'react';\nimport * as d3 from 'd3';\nimport Data from './Data';\nimport Axis from './Axis';\nimport Plot from './Plot';\nimport './Matrix.css';\n\n/**\n * @typedef  Point  point\n *\n * @type  {object}\n * @property  {number}   x        X coordinate, in pixels\n * @property  {number}   y        Y coordinate, in pixels\n */\n\n/**\n * @typedef  Rect  rectangle\n *\n * @type  {object}\n * @property  {number}   x        X coordinate, in pixels\n * @property  {number}   y        Y coordinate, in pixels\n * @property  {number}   width    width, in pixels\n * @property  {number}   height   height, in pixels\n */\n\n/**\n * Scatter plot matrix in an SVG element.\n *\n * @param  {Object}  props  properties\n * @return component\n */\nconst Matrix = ( props ) => {\n    \n    // Initialization.\n    const ref = useRef(),\n        { nData, opacity } = props,\n        width = 200,\n        height = 200,\n        nColumns = Data.getColumnNames().length,\n        data = Data.getValues( nData ),\n        totalWidth = nColumns * width,\n        totalHeight = nColumns * height,\n        brushNodeOffset = 4;\n        \n    /**\n     * Returns a function, that, as long as it continues to be invoked, will not be triggered.\n     * The function will be called after it stops being called for `wait` milliseconds.\n     *\n     * From https://levelup.gitconnected.com/debounce-in-javascript-improve-your-applications-performance-5b01855e086.\n     *\n     * @param func  function\n     * @param wait  delay, in milliseconds\n     * @return debounced function\n     */\n    const debounce = ( func, wait ) => {\n        let timeout;\n        return function executedFunction( ...args ) {\n            const later = () => {\n                clearTimeout( timeout );\n                func( ...args );\n            };\n            clearTimeout( timeout );\n            timeout = setTimeout( later, wait );\n        };\n    };\n        \n    // Cache scaled coordinates.\n    Matrix.scaled = [];\n    let scale = [];\n    for( let i = 0; ( i < nColumns ); i++ ) {\n        Matrix.scaled[ i ] = new Uint16Array( nData );\n        let x = i * width;\n        scale[ i ] = d3.scaleLinear().domain( Data.getDomain( nData, i )).range([ x + Plot.padding, x + width - Plot.padding ]);\n    }\n    data.forEach(( datum, row ) => {\n        for( let i = 0; ( i < nColumns ); i++ ) {\n            let x = i * width;\n            Matrix.scaled[ i ][ row ] = Math.round( scale[ i ]( datum[ i ]) - x );\n        }\n    });\n    \n    // Set hook to select and draw on mounting.\n    useEffect(() => {\n        \n        // Create the SVG elements (after https://observablehq.com/@d3/brushable-scatterplot-matrix?collection=@d3/d3-brush).\n        Matrix.canvas = d3.select( ref.current.childNodes[ 0 ]).node();\n        const svg = d3.select( ref.current.childNodes[ 1 ]);\n        svg.selectAll( \"*\" ).remove();\n        const cell = svg.append( \"g\" )\n            .selectAll( \"g\" )\n            .data( d3.cross( d3.range( nColumns ), d3.range( nColumns )))\n            .join( \"g\" )\n            .attr( \"transform\", ([ i, j ]) => `translate(${ i * width },${ j * height })` );\n            \n        // Create the brush.\n        const onStart = ( event ) => {\n            if( event.sourceEvent ) {\n                const target = event.sourceEvent.target.parentNode;\n                if( Matrix.brushNode !== target ) {\n                    d3.select( Matrix.brushNode ).call( brush.move, null );\n                    Matrix.brushNode = target;\n                    Data.deselectAll();\n                } else if( event.selection ) {\n                    const xDown = event.selection[ 0 ][ 0 ],\n                    yDown = event.selection[ 0 ][ 1 ],\n                    xUp = event.selection[ 1 ][ 0 ],\n                    yUp = event.selection[ 1 ][ 1 ];\n                    let offsetX, offsetY;\n                    if( event.sourceEvent.touches ) {\n                        const touch = event.sourceEvent.touches[ 0 ];\n                        offsetX = touch.clientX - Matrix.canvas.getBoundingClientRect().x;\n                        offsetY = touch.clientY - Matrix.canvas.getBoundingClientRect().y;\n                    } else {\n                        offsetX = event.sourceEvent.offsetX;\n                        offsetY = event.sourceEvent.offsetY;\n                    }\n                    let i = Math.floor( offsetX / width ),\n                    j = Math.floor( offsetY / height ),\n                    x = i * width,\n                    y = j * height;\n                    if( !Plot.isWithin({ x: offsetX, y : offsetY }, { x: x + xDown, y: y + yDown, width: xUp - xDown, height: yUp - yDown })) {\n                        Data.deselectAll();\n                    }\n                }\n            }\n        };\n        const debouncedDraw = debounce( Matrix.draw, 1 );\n        const onBrush = ( event ) => {\n            if( event.selection ) {\n                const xDown = event.selection[ 0 ][ 0 ],\n                    yDown = event.selection[ 0 ][ 1 ],\n                    xUp = event.selection[ 1 ][ 0 ],\n                    yUp = event.selection[ 1 ][ 1 ];\n                let offsetX, offsetY;\n                if( event.sourceEvent ) {\n                    if( event.sourceEvent.touches ) {\n                        const touch = event.sourceEvent.touches[ 0 ];\n                        offsetX = touch.clientX - Matrix.canvas.getBoundingClientRect().x;\n                        offsetY = touch.clientY - Matrix.canvas.getBoundingClientRect().y;\n                    } else {\n                        offsetX = event.sourceEvent.offsetX;\n                        offsetY = event.sourceEvent.offsetY;\n                    }\n                } else {\n                    offsetX = width * Math.floor( brushNodeOffset / 4 );\n                    offsetY = height * ( brushNodeOffset % 4 );\n                }\n                let i = Math.floor( offsetX / width ),\n                j = Math.floor( offsetY / height ),\n                x = i * width,\n                y = j * height;\n                if( i === j ) {\n                    Data.deselectAll();\n                } else {\n                    Data.selectedRows = Plot.select( x, y, width, height, i, j, Matrix.scaled, { x: x + xDown, y: y + yDown, width: xUp - xDown, height: yUp - yDown });\n                    if( Matrix.bitmaps && Matrix.bitmaps[ i ]) {\n                        Plot.draw( x, y, width, height, i, j, Matrix.scaled, ref.current.firstChild, opacity, Data.selectedRows, Matrix.bitmaps[ i ][ j ]);\n                    }\n                }\n            }\n            debouncedDraw( width, height, ref, nData, opacity, false );\n        };\n        const onEnd = ( event ) => {\n            Matrix.draw( width, height, ref, nData, opacity, true );\n        };\n        const brush = d3.brush()\n            .extent([[ 2, 2 ], [ width, height ]])\n            .on( \"start\", onStart )\n            .on( \"brush\", onBrush )\n            .on( \"end\", onEnd );\n        cell.call( brush );\n        \n        // Initialize the brush.\n        Matrix.brushNode = svg.node().firstChild.childNodes[ brushNodeOffset ];\n        const brushCell = d3.select( Matrix.brushNode );\n        brushCell.call( brush.move, [[ 40, 40 ], [ 80, 80 ]]);\n    });\n    \n    // Return the component.\n    return <div ref={ref}><canvas width={totalWidth} height={totalHeight}></canvas><svg width={totalWidth} height={totalHeight}></svg></div>;\n};\n\n/**\n * Bitmaps of deselected rows, cached for optimization, or undefined if none.\n *\n * @type {ImageData[][]|undefined}\n */\nMatrix.bitmaps = undefined;\n\n/**\n * CANVAS element, or undefined if none.\n *\n * @type {Element|undefined}\n */\nMatrix.canvas = undefined;\n \n/**\n * Node containing a brush, or undefined if none.\n *\n * @type {Node|undefined}\n */\nMatrix.brushNode = undefined;\n \n/**\n * Scaled coordinates, or undefined if none.\n *\n * @type {Uint16Array[]|undefined}}\n */\nMatrix.scaled = undefined;\n\n/**\n * Clears data structures.\n */\nMatrix.clear = () => {\n    Data.deselectAll();\n    Matrix.bitmaps = undefined;\n};\n\n/**\n * Draws the grid, the plots, and the axes.\n *\n * @param  {number}  width          width in pixels\n * @param  {number}  height         height in pixels\n * @param  {Object}  ref            reference to DIV\n * @param  {number}  nData          number of data values\n * @param  {number}  opacity        alpha\n * @param  {boolean} isDrawingAll   true iff clearing and redrawing grid and axes\n */\nMatrix.draw = ( width, height, ref, nData, opacity, isDrawingAll ) => {\n    \n    // Initialization.  If no context, do nothing.\n    if( !ref ) {\n        return;\n    }\n    let canvas = ref.current.firstChild,\n        g = canvas.getContext( \"2d\" ),\n        nColumns = Data.getColumnNames().length;\n    if( !g ) {\n        return;\n    }\n    \n    // If requested, clear the drawing area and draw the grid.\n    if( isDrawingAll ) {\n        g.clearRect( 0, 0, nColumns * width, nColumns * height );\n        g.strokeStyle = \"#939ba1\";\n        for( let i = 1; ( i < nColumns ); i++ ) {\n            g.moveTo( i * width + 0.5, 0 );\n            g.lineTo( i * width + 0.5, nColumns * height );\n            g.moveTo( 0, i * height + 0.5 );\n            g.lineTo( nColumns * width, i * height + 0.5 );\n        }\n        g.stroke();\n    }\n    \n    // Draw the plots and the axes.  On first draw, store the bitmaps.\n    let isFirstDraw = !Matrix.bitmaps;\n    if( isFirstDraw ) {\n        Matrix.bitmaps = [];\n    }        \n    for( let i = 0; ( i < nColumns ); i++ ) {\n        for( let j = 0; ( j < nColumns ); j++ ) {\n\n            // Get the position.\n            let x = i * width,\n                y = j * height;\n\n            // Draw an axis...\n            if( i === j ) {\n                if( isDrawingAll ) {\n                    Axis.draw( x, y, width, height, canvas, nData, i );\n                }\n            }\n\n            // ...or a plot.\n            else {\n                if( isFirstDraw ) {\n                    if( Matrix.bitmaps[ i ] === undefined ) {\n                        Matrix.bitmaps[ i ] = [];\n                    }\n                    Matrix.bitmaps[ i ][ j ] =\n                        Plot.draw( x, y, width, height, i, j, Matrix.scaled, canvas, opacity, Data.selectedRows );\n                } else {\n                    Plot.draw( x, y, width, height, i, j, Matrix.scaled, canvas, opacity, Data.selectedRows, Matrix.bitmaps[ i ][ j ]);\n                }\n            }\n        }\n    }\n};\n\nexport default Matrix;\n","export default __webpack_public_path__ + \"static/media/becker.ed8ef60d.png\";","export default __webpack_public_path__ + \"static/media/cleveland.70d2e3e7.png\";","import React, { useState } from 'react';\nimport { Slider } from '@mui/material';\nimport Matrix from './Matrix';\nimport './App.css';\nimport becker from './becker.png';\nimport cleveland from './cleveland.png';\n\n// Application:  Optimized Brushing\nconst App = () => {\n    \n    // Create state.\n    const nDataDefault = 14;\n    const transparencyDefault = 0.5;\n    const [ nData, setNData ] = useState( App.getPower( nDataDefault ));\n    const [ opacity, setOpacity ] = useState( 1 - transparencyDefault );\n    \n    // Return the component.\n    return (\n        <div className=\"Column\">\n            <div className=\"Description\">\n                <h1>Optimized Brushing</h1>\n                <p>\n                Brushing is a basic technique of exploratory data analysis, developed in the 1970s and 1980s.  Back then, analysts were happy to brush a few hundred points.  On modern hardware, we can brush many more.\n                </p>\n                <p>\n                Drag the brush to select the points.  Drag the edges to resize the brush.  Drag a rectangle in any plot to create a new brush.\n                </p>\n                <p>\n                Use the sliders to adjust the number of points and their transparency.\n                </p>\n                <Matrix nData={nData} opacity={opacity} />\n                <br />\n            </div>\n            <div className=\"GridControls\">\n                <label>Points per Plot:</label>\n                <Slider defaultValue={ nDataDefault } step={ 1 } min={ 9 } max={ 18 }\n                    valueLabelDisplay=\"auto\" marks valueLabelFormat={( value ) => { let s = App.getPower( value ); if( s >= 1000000 ) { s = s / 1000000 + \"M\"; } else if( s >= 1000 ) { s = s / 1000 + \"K\" }; return s }}\n                    onChange={( event, value ) => { Matrix.clear(); setNData( App.getPower( value )); }} />\n                <span/>\n                <label>Transparency:</label>\n                <Slider defaultValue={ transparencyDefault } step={ 0.01 } min={ 0 } max={ 0.99 }\n                    valueLabelDisplay=\"auto\"\n                    onChange={( event, value ) => { Matrix.clear(); setOpacity( 1 - value ); }} />\n            </div>\n            <div className=\"Description\">\n                <h2>Design Notes</h2>\n                <p className=\"center\">\n                    <a href=\"https://www.datavis.ca/milestones/index.php?group=1975%2B&mid=ms259\"><img title=\"Dr. Richard Becker\" alt=\"Dr. Richard Becker\" src={becker}/></a>\n                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                    <a href=\"https://www.datavis.ca/milestones/index.php?group=1975%2B&mid=ms259\"><img title=\"Dr. William Cleveland\" alt=\"Dr. William Cleveland\" src={cleveland}/></a>\n                    <br />\n                </p>\n                <p>\n                This design derives from the <a href=\"http://www.sci.utah.edu/~kpotter/Library/Papers/becker:1987:BS/index.html\">scatter plot matrix</a> of <a href=\"https://www.researchgate.net/scientific-contributions/Richard-A-Becker-7076158\">Richard Becker</a> and <a href=\"https://www.cerias.purdue.edu/site/people/faculty/view/709\">William Cleveland</a> (Becker and Cleveland, 1987).  The implementation uses code from the <a href=\"https://observablehq.com/collection/@d3/d3-brush\">d3-brush collection</a>.\n                </p>\n                <p>\n                The goal of the scatter plot matrix is not to locate points, but to find patterns in the data.  Therefore, there are no axes, only data ranges.  This increases Tufte's \"Data-Ink Ratio\" (Tufte, 1983).\n                </p>\n                <p>\n                Colors emphasize the data.   Black on white gives maximum emphasis.  The red selection color draws attention.  The grid, being less important, is gray.\n                </p>\n                <p>\n                For the same reason, the brush could be gray.  However, usability tests pointed out that blue is the standard selection color (Ho, 2016).  Following standards eases the user's learning curve.\n                </p>\n                <p>\n                <a href=\"https://github.com/d3/d3-brush\">D3's brush</a> is <em>persistent</em> rather than <em>transient</em>.  A persistent brush reduces errors, by enabling the user to resize the brush (Tidwell, 2010).  A persistent brush also helps users share their explorations, through screen shots for example.\n                </p>\n                <p>\n                Transparency shows density, via <a href=\"https://en.wikipedia.org/wiki/Alpha_compositing\">alpha blending</a>.  This gives scatter plots the expressive power of contour plots, while still displaying individual points (Wegman and Luo, 2002).\n                </p>\n                <p>\n                Optimization was a joint effort with <a href=\"https://observablehq.com/@fil\">Fil</a>, whose suggestions made this much faster.  There are a number of small optimizations, but these had the greatest effect:\n                </p>\n                <ol>\n                <li>Drawing in a single CANVAS eliminates the need to allocate thousands of SVG elements.</li>\n                <li>Drawing each row of data as a single pixel displays large data sets with minimal drawing code.</li>\n                <li>Deselected points are cached in bitmaps, so that drawing a plot requires only a fast <a href=\"https://en.wikipedia.org/wiki/Bit_blit\">bit blit</a>, then drawing the selected points.</li>\n                <li>Pixel coordinates are cached in integer Arrays, to eliminate scaling calculations during drawing and selection.</li>\n                <li>The brushing interaction is <a href=\"https://levelup.gitconnected.com/debounce-in-javascript-improve-your-applications-performance-5b01855e086\">debounced</a>, to reduce drawing in large data sets.</li>\n                </ol>\n                <p>\n                Performance varies on different devices.  My iMac can brush 1,000,000 points per plot; in a 4x4 matrix, that's twelve million points.  As our hardware improves, we'll see these numbers grow.\n                </p>\n                <br/>\n                <h2>References</h2>\n                <ul>\n                    <li>Becker, R. and Cleveland, W. (1987). \"Brushing Scatterplots\". Technometrics. 29 (2): 127-142. <a href=\"https://doi.org/10.2307/1269768\">https://doi.org/10.2307/1269768</a>.</li><br/>\n                    <li>Ho, Y. (2016). Personal communication. <a href=\"https://www.linkedin.com/in/yang-ho-94b14860/\">https://www.linkedin.com/in/yang-ho-94b14860/</a></li><br/>\n                    <li>Tidwell, J. (2010). Designing Interfaces: Patterns for Effective Interaction Design, Second Edition, 312-314.  Sebastopol CA: O'Reilly Media. <a href=\"https://www.oreilly.com/library/view/designing-interfaces-3rd/9781492051954/\">https://www.oreilly.com/library/view/designing-interfaces-3rd/9781492051954/</a>.</li><br/>\n                    <li>Tufte, E. (1983). The Visual Display of Quantitative Information, First Edition, 91-105.  Cheshire CN: Graphics Press. <a href=\"https://www.edwardtufte.com/tufte/\">https://www.edwardtufte.com/tufte/</a>.</li><br/>\n                    <li>Wegman, E. and Luo, Q. (2002). \"On Methods of Computer Graphics for Visualizing Densities\". Journal of Computational and Graphical Statistics 11, (1), 137-162. <a href=\"https://doi.org/10.1198/106186002317375659\">https://doi.org/10.1198/106186002317375659</a>.</li><br/>\n\n                </ul>\n            </div>\n            <a href=\"https://github.com/hemanrobinson/brush/\">Code Shared on GitHub</a>\n        </div>\n    );\n}\n\n/**\n * Returns \"nice\" power of ten:  rounded to 1, 2, 5, 10, 20, 50, etc.\n *\n * @param  {number}  exp  exponent\n * @return {number}  \"nice\" power of ten:  rounded to 1, 2, 5, 10, 20, 50, etc.\n */\nApp.getPower = ( exp ) => {\n    let m = (( exp % 3 ) === 0 ) ? 1 : (( exp % 3 ) === 1 ) ? 2 : 5;\n    return m * ( 10 ** Math.floor( exp / 3 ));\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n// Render the app.\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById( 'root' )\n);\n"],"sourceRoot":""}