{"version":3,"sources":["Data.js","Axis.js","Plot.js","Matrix.js","App.js","index.js"],"names":["Data","props","isSelected","deselectAll","fill","getColumnNames","getDomain","nData","i","values","getValues","length","f","d3","x","y","Axis","draw","width","height","canvas","index","g","getContext","columnNames","fillStyle","fontSize","s","fillText","measureText","slice","Plot","padding","normalize","rect","nx","ny","nw","nh","isWithin","point","tol","nRect","undefined","j","opacity","imageData","selectedRows","data","xScale","domain","range","yScale","deselectedImageData","d","createImageData","forEach","datum","xScaled","yScaled","k","Math","floor","round","myImageData","set","row","putImageData","select","brush","xMin","invert","min","xMax","max","yMin","yMax","push","Matrix","ref","useRef","nColumns","totalWidth","totalHeight","on","event","selection","xDown","yDown","xUp","yUp","useEffect","current","childNodes","call","move","bitmaps","clear","firstChild","clearRect","strokeStyle","moveTo","lineTo","stroke","isFirstDraw","App","useState","getPower","setNData","setOpacity","className","Slider","defaultValue","step","valueLabelDisplay","marks","valueLabelFormat","value","toExponential","onChangeCommitted","href","exp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c7a757d3.chunk.js","sourcesContent":["import * as d3 from 'd3';\n\n/**\n * Data sets.\n *\n * @param  {Object}  props  properties\n * @return component\n */\nconst Data = ( props ) => {\n};\n\n/**\n * True iff data row is selected.\n *\n * @type {boolean[]}\n */\nData.isSelected = [];\n\n/**\n * Deselects all rows.\n */\nData.deselectAll = () => {\n    Data.isSelected.fill( false );\n};\n\n/**\n * Returns column names.\n *\n * @return {string[]}  column names\n */\nData.getColumnNames = () => {\n    return [ \"isSelected\", \"A\", \"B\", \"A + B\", \"A * B\" ];\n};\n\n/**\n * Returns domain of specified column.\n *\n * @param  {number}    nData  number of data values\n * @param  {number}    index  column index\n * @return {number[]}  domain of specified column\n */\nData.getDomain = ( nData, i ) => {\n//  return [ d3.min( Data.getValues( nData ), d => d[ index ]), d3.max( Data.getValues( nData ), d => d[ index ])];\n    return [ -2, 2 ];   // consistently spreads the data\n};\n\n/**\n * Data values.\n *\n * @type {number[]}\n */\nData.values = [];\n\n/**\n * Returns data values.\n *\n * @param  {number}  nData  number of data values\n * @return {Array[]}  data values by row\n */\nData.getValues = ( nData ) => {\n    if( Data.values.length !== nData ) {\n        let f = d3.randomNormal( 0, 0.5 );\n        Data.values = [];\n        for( let i = 0; ( i < nData ); i++ ) {\n            let x = f(), y = f();\n            Data.values[ i ] = [ false, x, y, x + y, x * y ];\n        }\n    }\n    return Data.values;\n};\n\nexport default Data;\n","import Data from './Data';\n\n/**\n * Axis for scatter plot matrix in an SVG element.\n *\n * @param  {Object}  props  properties\n * @return component\n */\nconst Axis = ( props ) => {\n};\n\n/**\n * Draws the axis.\n *\n * @param  {number}  x        X coordinate, in pixels\n * @param  {number}  y        Y coordinate, in pixels\n * @param  {number}  width    width, in pixels\n * @param  {number}  height   height, in pixels\n * @param  {Element} canvas   CANVAS element\n * @param  {number}  nData    number of data values\n * @param  {number}  index    column index\n */\nAxis.draw = ( x, y, width, height, canvas, nData, index ) => {\n    \n    // Initialization.\n    let g = canvas.getContext( \"2d\" ),\n        columnNames = Data.getColumnNames();\n        \n    // Draw the column label.\n    g.fillStyle = \"#000000\";\n    g.fontSize = \"14px\";\n    let s = columnNames[ index ];\n    g.fillText( s, x + width / 2 - g.measureText( s ).width / 2, y + height - height / 2 + 4 );\n    \n    // Draw the minimum and maximum.\n    g.fontSize = \"10px\";\n    s = ( \"\" + Data.getDomain( nData, index )[ 0 ]).slice( 0, 4 );\n    g.fillText( s, x + 4, y + height - 4 );\n    s = ( \"\" + Data.getDomain( nData, index )[ 1 ]).slice( 0, 3 );\n    g.fillText( s, x + width - 3 - g.measureText( s ).width, y + 12 );\n};\n\nexport default Axis;\n","import * as d3 from 'd3';\nimport Data from './Data';\n\n/**\n * Scatter plot in an SVG element.\n *\n * @param  {Object}  props  properties\n * @return component\n */\nconst Plot = ( props ) => {\n};\n \n/**\n * Padding, in pixels.\n *\n * @constant {number}\n */\nPlot.padding = 10;\n    \n/**\n * Returns normalized rectangle.\n *\n * @param   {Rect}  rect   rectangle\n * @return  {Rect}  normalized rectangle\n */\nPlot.normalize = ( rect ) => {\n    let nx = rect.x,\n        ny = rect.y,\n        nw = rect.width,\n        nh = rect.height;\n    if( nw < 0 ) {\n        nx += nw;\n        nw = -nw;\n    }\n    if( nh < 0 ) {\n        ny += nh;\n        nh = -nh;\n    }\n    return { x: nx, y: ny, width: nw, height: nh };\n}\n\n/**\n * Returns whether point is within rectangle, within tolerance.\n *\n * @param  {Point}   point  point\n * @param  {Rect}    rect   rectangle\n * @param  {number}  tol    tolerance, or 0 for undefined\n */\nPlot.isWithin = ( point, rect, tol ) => {\n    let nRect = Plot.normalize( rect );\n    if( tol !== undefined ) {\n        nRect.x -= tol;\n        nRect.y -= tol;\n        nRect.width += 2 * tol;\n        nRect.height += 2 * tol;\n    }\n    return ( nRect.x <= point.x ) && ( point.x < nRect.x + nRect.width  ) &&\n           ( nRect.y <= point.y ) && ( point.y < nRect.y + nRect.height );\n}\n\n/**\n * Draws the plot.\n *\n * @param  {number}               x             X coordinate, in pixels\n * @param  {number}               y             Y coordinate, in pixels\n * @param  {number}               width         width, in pixels\n * @param  {number}               height        height, in pixels\n * @param  {Element}              canvas        CANVAS element\n * @param  {number}               nData         number of data values\n * @param  {number}               i             X column index\n * @param  {number}               j             Y column index\n * @param  {number}               opacity       alpha\n * @param  {ImageData|undefined}  imageData     bitmap of deselected points, or undefined if none\n * @param  {number[]|undefined}   selectedRows  Array of indices of selected rows, or undefined if none\n * @return {ImageData}            bitmap of deselected points\n */\nPlot.draw = ( x, y, width, height, canvas, nData, i, j, opacity, imageData, selectedRows ) => {\n    \n    // Initialization.\n    const g = canvas.getContext( \"2d\" ),\n        padding = Plot.padding;\n    let data = Data.getValues( nData ),\n        xScale = d3.scaleLinear().domain( Data.getDomain( nData, i )).range([ x + padding, x + width - padding ]),\n        yScale = d3.scaleLinear().domain( Data.getDomain( nData, j )).range([ y + height - padding, y + padding ]),\n        deselectedImageData = imageData;\n        \n    // Create the deselected bitmap if necessary.\n    // For alpha blending, see e.g. https://en.wikipedia.org/wiki/Alpha_compositing#Alpha_blending.\n    if( deselectedImageData === undefined ) {\n        deselectedImageData = g.createImageData( width, height );                           // black and transparent\n        const d = deselectedImageData.data;\n        data.forEach(( datum ) => {\n            let xScaled = xScale( datum[ i ]) - x,\n                yScaled = yScale( datum[ j ]) - y;\n            if(( 0 <= xScaled ) && ( xScaled < width ) && ( 0 <= yScaled ) && ( yScaled < height )) {\n                let k = Math.floor( yScaled ) * ( width * 4 ) + Math.floor( xScaled ) * 4;\n                d[ k     ] = Math.round(             0 + d[ k     ] * ( 1 - opacity ));     // r\n                d[ k + 1 ] = Math.round(             0 + d[ k + 1 ] * ( 1 - opacity ));     // g\n                d[ k + 2 ] = Math.round(             0 + d[ k + 2 ] * ( 1 - opacity ));     // b\n                d[ k + 3 ] = Math.round( 255 * opacity + d[ k + 3 ] * ( 1 - opacity ));     // alpha\n            }\n        });\n    }\n    \n    // Make a local copy.\n    let myImageData = g.createImageData( width, height );\n    myImageData.data.set( deselectedImageData.data );\n    const d = myImageData.data;\n    \n    // Selected rows use opacity, but not alpha blending, in order to keep them bright.\n    // Add the selected rows as specified...\n    if( selectedRows !== undefined ) {\n        selectedRows.forEach(( row ) => {\n            let xScaled = xScale( data[ row ][ i ]) - x,\n                yScaled = yScale( data[ row ][ j ]) - y;\n            if(( 0 <= xScaled ) && ( xScaled < width ) && ( 0 <= yScaled ) && ( yScaled < height )) {\n                let k = Math.floor( yScaled ) * ( width * 4 ) + Math.floor( xScaled ) * 4;\n                d[ k ] = Math.round( 255 + d[ k ] * ( 1 - opacity ));                       // r\n            }\n        });\n    }\n    \n    // ...or add the selected rows from the data.\n    else {\n        let row = 0;\n        data.forEach(( datum ) => {\n            if( Data.isSelected[ row ]) {\n                let xScaled = xScale( datum[ i ]) - x,\n                    yScaled = yScale( datum[ j ]) - y;\n                if(( 0 <= xScaled ) && ( xScaled < width ) && ( 0 <= yScaled ) && ( yScaled < height )) {\n                    let k = Math.floor( yScaled ) * ( width * 4 ) + Math.floor( xScaled ) * 4;\n                    d[ k ] = Math.round( 255 + d[ k ] * ( 1 - opacity ));                   // r\n                }\n            }\n            row++;\n        });\n    }\n    \n    // Draw and return the bitmap.\n    g.putImageData( myImageData, x, y, padding, padding, width - 2 * padding, height - 2 * padding );\n    return deselectedImageData;\n};\n\n/**\n * Selects rows within the brush and returns them.\n *\n * @param  {number}    x       X coordinate, in pixels\n * @param  {number}    y       Y coordinate, in pixels\n * @param  {number}    width   width, in pixels\n * @param  {number}    height  height, in pixels\n * @param  {number}    nData   number of data values\n * @param  {number}    i       X column index\n * @param  {number}    j       Y column index\n * @param  {Rect}      brush   brush\n * @return {number[]}  Array of indices of selected rows, or undefined if none\n */\nPlot.select = ( x, y, width, height, nData, i, j, brush ) => {\n    \n    // Initialization.\n    const padding = Plot.padding;\n    let selectedRows = [],\n        data = Data.getValues( nData ),\n        xScale = d3.scaleLinear().domain( Data.getDomain( nData, i )).range([ x + padding, x + width - padding ]),\n        yScale = d3.scaleLinear().domain( Data.getDomain( nData, j )).range([ y + height - padding, y + padding ]),\n        xMin = xScale.invert( Math.min( brush.x, brush.x + brush.width )),\n        xMax = xScale.invert( Math.max( brush.x, brush.x + brush.width )),\n        yMin = yScale.invert( Math.max( brush.y, brush.y + brush.height )),\n        yMax = yScale.invert( Math.min( brush.y, brush.y + brush.height ));\n    \n    // Select the rows and return them.\n    let row = 0;\n    data.forEach(( datum ) => {\n        Data.isSelected[ row ] = ( xMin <= datum[ i ]) && ( datum[ i ] < xMax ) && ( yMin <= datum[ j ]) && ( datum[ j ] < yMax );\n        if( Data.isSelected[ row ]) {\n            selectedRows.push( row );\n        }\n        row++;\n    });\n    return selectedRows;\n};\n\nexport default Plot;\n","import React, { useRef, useEffect }  from 'react';\nimport * as d3 from 'd3';\nimport Data from './Data';\nimport Axis from './Axis';\nimport Plot from './Plot';\nimport './Matrix.css';\n\n/**\n * @typedef  Point  point\n *\n * @type  {object}\n * @property  {number}   x        X coordinate, in pixels\n * @property  {number}   y        Y coordinate, in pixels\n */\n\n/**\n * @typedef  Rect  rectangle\n *\n * @type  {object}\n * @property  {number}   x        X coordinate, in pixels\n * @property  {number}   y        Y coordinate, in pixels\n * @property  {number}   width    width, in pixels\n * @property  {number}   height   height, in pixels\n */\n\n/**\n * Scatter plot matrix in an SVG element.\n *\n * @param  {Object}  props  properties\n * @return component\n */\nconst Matrix = ( props ) => {\n    \n    // Initialization.\n    const ref = useRef(),\n        { nData, opacity } = props,\n        width = 200,\n        height = 200,\n        nColumns = Data.getColumnNames().length,\n        totalWidth = ( nColumns - 1 ) * width,\n        totalHeight = ( nColumns - 1 ) * height;\n    \n    // Create the brush.\n    const onStart = ( event ) => {\n        Matrix.selectedRows = undefined;\n        Data.deselectAll();\n    };\n    const onBrush = ( event ) => {\n        Matrix.selectedRows = undefined;\n        Data.deselectAll();\n        if( event.selection ) {\n            let xDown = event.selection[ 0 ][ 0 ],\n                yDown = event.selection[ 0 ][ 1 ],\n                xUp = event.selection[ 1 ][ 0 ],\n                yUp = event.selection[ 1 ][ 1 ],\n                i = Math.floor( xDown / width ),\n                j = Math.floor( yDown / height ),\n                x = i * width,\n                y = j * height;\n            Matrix.selectedRows = ( i === j ) ? [] : Plot.select( x, y, width, height, nData, i + 1, j + 1, { x: xDown, y: yDown, width: xUp - xDown, height: yUp - yDown });\n        }\n        Matrix.draw( width, height, ref, nData, opacity );\n    };\n    const brush = d3.brush()\n        .on( \"start\", onStart )\n        .on( \"brush end\", onBrush );\n    \n    // Set hook to select and draw on mounting.\n    useEffect(() => {\n        Matrix.draw( width, height, ref, nData, opacity );\n        const svg = d3.select( ref.current.childNodes[ 1 ]);\n        svg\n            .call( brush )\n            .call( brush.move, [[ 460, 260 ], [ 500, 300 ]]);\n    });\n    \n    // Return the component.\n    return <div ref={ref}><canvas width={totalWidth} height={totalHeight}></canvas><svg width={totalWidth} height={totalHeight}></svg></div>;\n};\n\n/**\n * Bitmaps of deselected rows, cached for optimization.\n *\n * @type {ImageData[][]|undefined}\n */\nMatrix.bitmaps = undefined;\n \n/**\n * Array of indices of selected rows, or undefined if none.\n *\n * @type {number[]|undefined}\n */\nMatrix.selectedRows = undefined;\n\n/**\n * Clears data structures.\n */\nMatrix.clear = () => {\n    Matrix.bitmaps = undefined;\n    Matrix.selectedRows = undefined;\n    Data.deselectAll();\n};\n\n/**\n * Draws the plots.\n *\n * @param  {number}  width    width in pixels\n * @param  {number}  height   height in pixels\n * @param  {Object}  ref      reference to DIV\n * @param  {number}  nData    number of data values\n * @param  {number}  opacity  alpha\n */\nMatrix.draw = ( width, height, ref, nData, opacity ) => {\n    \n    // Initialization.  If no context, do nothing.\n    if( !ref ) {\n        return;\n    }\n    let canvas = ref.current.firstChild,\n        g = canvas.getContext( \"2d\" ),\n        nColumns = Data.getColumnNames().length;\n    if( !g ) {\n        return;\n    }\n    \n    // Erase the drawing area.\n    g.clearRect( 0, 0, ( nColumns - 1 ) * width, ( nColumns - 1 ) * height );\n    \n    // Draw the grid.\n    g.strokeStyle = \"#a0a0a0\";\n    for( let i = 1; ( i < nColumns - 1 ); i++ ) {\n        g.moveTo( i * width + 0.5, 0 );\n        g.lineTo( i * width + 0.5, ( nColumns - 1 ) * height );\n        g.moveTo( 0, i * height + 0.5 );\n        g.lineTo(( nColumns - 1 ) * width, i * height + 0.5 );\n    }\n    g.stroke();\n    \n    // Draw the plots and the axes.  On first draw, store the bitmaps.\n    let isFirstDraw = !Matrix.bitmaps;\n    if( isFirstDraw ) {\n        Matrix.bitmaps = [];\n    }\n    for( let i = 1; ( i < nColumns ); i++ ) {\n        for( let j = 1; ( j < nColumns ); j++ ) {\n\n            // Get the position.\n            let x = ( i - 1 ) * width,\n                y = ( j - 1 ) * height;\n\n            // Draw an axis...\n            if( i === j ) {\n                Axis.draw( x, y, width, height, canvas, nData, i );\n            }\n\n            // ...or a plot.\n            else {\n                if( isFirstDraw ) {\n                    if( Matrix.bitmaps[ i - 1 ] === undefined ) {\n                        Matrix.bitmaps[ i - 1 ] = [];\n                    }\n                    Matrix.bitmaps[ i - 1 ][ j - 1 ] = Plot.draw( x, y, width, height, canvas, nData, i, j, opacity );\n                } else {\n                    Plot.draw( x, y, width, height, canvas, nData, i, j, opacity, Matrix.bitmaps[ i - 1 ][ j - 1 ], Matrix.selectedRows );\n                }\n            }\n        }\n    }\n};\n\nexport default Matrix;\n","import React, { useState } from 'react';\nimport { Slider } from '@material-ui/core';\nimport Matrix from './Matrix';\nimport './App.css';\n\n// Application:  Optimized Brushing\nconst App = () => {\n    \n    // Create state.\n    const nDataDefault = 12;\n    const [ nData, setNData ] = useState( App.getPower( nDataDefault ));\n    const [ opacity, setOpacity ] = useState( 0.5 );\n    \n    // Return the component.\n    return (\n        <div className=\"Column\">\n            <div className=\"Description\">\n                <h1>Optimized Brushing</h1>\n                <p>\n                Brushing is a basic technique of exploratory data analysis, developed in the 1970s and 1980s (Fishkeller, Friedman, and Tukey, 1974) (Becker and Cleveland, 1987) (Stuetzle, 1987).  Back then, analysts were happy to brush a few hundred points.  On modern hardware, we can brush many more.\n                </p>\n                <p>\n                Drag the brush to select the points.  Drag the corners to resize the brush.  Drag a rectangle in any plot to create a new brush.\n                </p>\n                <Matrix nData={nData} opacity={opacity} />\n            </div>\n            <div className=\"GridControls\">\n                <label>Points:</label>\n                <Slider defaultValue={ nDataDefault } step={ 1 } min={ 6 } max={ 18 }\n                    valueLabelDisplay=\"auto\" marks valueLabelFormat={( value ) => App.getPower( value ).toExponential()}\n                    onChangeCommitted={( event, value ) => { Matrix.clear(); setNData( App.getPower( value )); }} />\n                <label>Transparency:</label>\n                <Slider defaultValue={ 0.5 } step={ 0.01 } min={ 0 } max={ 1 }\n                    valueLabelDisplay=\"auto\"\n                    onChangeCommitted={( event, value ) => { Matrix.clear(); setOpacity( 1 - value ); }} />\n            </div>\n            <div className=\"Description\">\n                <h2>Design Notes</h2>\n                <p>\n                This implements <a href=\"http://www.sci.utah.edu/~kpotter/Library/Papers/becker:1987:BS/index.html\">Becker and Cleveland's scatter plot matrix</a> (Becker and Cleveland, 1987), with the following optimizations:\n                </p>\n                <ol>\n                <li>Points are drawn as a single pixel.</li>\n                <li>CANVAS is used because it performs faster than SVG.</li>\n                <li>Deselected points are cached in bitmaps, so that drawing a plot requires only bit-blitting, then drawing the selected points.</li>\n                <li>Iteration is done over a list of selected points, smaller than the entire data set.</li>\n                </ol>\n                <p>\n                To minimize distraction, the matrix displays no axes, but only data ranges.  The purpose of this graph is not to show precise locations of points, but to reveal patterns, particularly two-dimensional relationships.\n                </p>\n                <p>\n                Transparency mitigates overplotting (Wegman and Luo, 2002).  (This does not implement Wegman's \"saturation brushing\" (Wegman and Luo, 1997)).\n                </p>\n                <p>\n                Colors are chosen to emphasize the data.  Black on white gives maximum emphasis.  The red selection color draws attention.  The grid, being less important, is gray.  For the same reason, the brush could be gray; but blue is the default selection color in most web browsers.\n                </p>\n                <p>\n                Affordances are visible.  The user can see the handles to resize the brush.  This eases the learning curve for novice users.  To minimize distraction from the data display, handles are displayed only when they can be used.\n                </p>\n                <p>\n                The brush is <em>persistent</em> rather than <em>transient</em>, as suggested by (Tidwell, 2006).  A persistent brush reduces errors, by enabling the user to adjust the brush.  A persistent brush also enables users to share the path of their exploration.\n                </p>\n                <br/>\n                <h2>References</h2>\n                <ul>\n                    <li>Becker, R. and Cleveland, W. (1987). \"Brushing Scatterplots\". Technometrics. 29 (2): 127-142. <a href=\"https://doi.org/10.2307/1269768\">https://doi.org/10.2307/1269768</a>.</li><br/>\n                    <li>Fishkeller, Friedman, and Tukey (1974). “PRIM-9: An Interactive Multidimensional Data Display and Analysis System” SLAC-PUB-1408. Stanford, CA: Stanford Linear Accelerator Center. <a href=\"https://www.researchgate.net/publication/245345268_An_interactive_multidimensional_data_display_and_analysis_system\">https://www.researchgate.net/publication/245345268_An_interactive_multidimensional_data_display_and_analysis_system</a>.</li><br/>\n                    <li>Stuetzle, W. (1987). \"Plot Windows\". Journal of the American Statistical Association. 82 (398): 466-475. <a href=\"https://doi.org/10.2307/2289448\">https://doi.org/10.2307/2289448</a>.</li><br/>\n                    <li>Tidwell, J. (2006). Designing Interfaces, First Edition, 182. Sebastopol CA: O'Reilly Media.<a href=\"https://www.oreilly.com/library/view/designing-interfaces-3rd/9781492051954/\">https://www.oreilly.com/library/view/designing-interfaces-3rd/9781492051954/</a>.</li><br/>\n                    <li>Wegman, E. and Luo, Q. (1997). “High dimensional clustering using parallel coordinates and the grand tour.” Computing Science and Statistics, 28, 352-360. <a href=\"https://www.researchgate.net/publication/2357383_High_Dimensional_Clustering_Using_Parallel_Coordinates_and_the_Grand_Tour\">https://www.researchgate.net/publication/2357383_High_Dimensional_Clustering_Using_Parallel_Coordinates_and_the_Grand_Tour</a>.</li><br/>\n                    <li>Wegman, E. and Luo, Q. (2002). \"On Methods of Computer Graphics for Visualizing Densities\". Journal of Computational and Graphical Statistics 11, (1), 137-162. <a href=\"https://doi.org/10.1198/106186002317375659\">https://doi.org/10.1198/106186002317375659</a>.</li><br/>\n\n                </ul>\n            </div>\n            <a href=\"https://github.com/hemanrobinson/brush/\">Code Shared on GitHub</a>\n        </div>\n    );\n}\n\n/**\n * Returns \"nice\" power of ten:  rounded to 1, 2, 5, 10, 20, 50, etc.\n *\n * @param  {number}  exp  exponent\n * @return {number}  \"nice\" power of ten:  rounded to 1, 2, 5, 10, 20, 50, etc.\n */\nApp.getPower = ( exp ) => {\n    let m = (( exp % 3 ) === 0 ) ? 1 : (( exp % 3 ) === 1 ) ? 2 : 5;\n    return m * ( 10 ** Math.floor( exp / 3 ));\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n// Render the app.\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById( 'root' )\n);\n"],"sourceRoot":""}