{"version":3,"sources":["Data.js","Axis.js","Plot.js","Matrix.js","cleveland.png","tukey.png","App.js","index.js"],"names":["Data","props","isSelected","deselectAll","fill","getColumnNames","getDomain","nData","i","values","getValues","length","f","d3","a","b","Math","sin","Axis","draw","x","y","width","height","canvas","index","g","getContext","columnNames","fillStyle","fontSize","s","fillText","measureText","slice","Plot","padding","normalize","rect","nx","ny","nw","nh","isWithin","point","tol","nRect","undefined","j","opacity","imageData","selectedRows","data","xScale","domain","range","yScale","deselectedImageData","d","createImageData","forEach","datum","xScaled","yScaled","k","floor","round","myImageData","set","row","putImageData","select","brush","xMin","invert","min","xMax","max","yMin","yMax","push","Matrix","ref","useRef","nColumns","totalWidth","totalHeight","useEffect","svg","current","childNodes","selectAll","remove","cell","append","join","attr","extent","on","event","sourceEvent","target","parentNode","brushNode","call","move","selection","offsetX","offsetY","xDown","yDown","xUp","yUp","node","firstChild","bitmaps","clear","clearRect","strokeStyle","moveTo","lineTo","stroke","isFirstDraw","App","useState","getPower","setNData","setOpacity","className","Slider","defaultValue","step","valueLabelDisplay","marks","valueLabelFormat","value","onChangeCommitted","href","alt","src","cleveland","tukey","exp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73ff2b13.chunk.js","sourcesContent":["import * as d3 from 'd3';\n\n/**\n * Data sets.\n *\n * @param  {Object}  props  properties\n * @return component\n */\nconst Data = ( props ) => {\n};\n\n/**\n * True iff data row is selected.\n *\n * @type {boolean[]}\n */\nData.isSelected = [];\n\n/**\n * Deselects all rows.\n */\nData.deselectAll = () => {\n    Data.isSelected.fill( false );\n};\n\n/**\n * Returns column names.\n *\n * @return {string[]}  column names\n */\nData.getColumnNames = () => {\n    return [ \"isSelected\", \"A\", \"B\", \"A * B\", \"sin( A / B )\"];\n};\n\n/**\n * Returns domain of specified column.\n *\n * @param  {number}    nData  number of data values\n * @param  {number}    index  column index\n * @return {number[]}  domain of specified column\n */\nData.getDomain = ( nData, i ) => {\n//  return [ d3.min( Data.getValues( nData ), d => d[ index ]), d3.max( Data.getValues( nData ), d => d[ index ])];\n    return [ -1.5, 1.5 ];   // consistently spreads the data\n};\n\n/**\n * Data values.\n *\n * @type {number[]}\n */\nData.values = [];\n\n/**\n * Returns data values.\n *\n * @param  {number}  nData  number of data values\n * @return {Array[]}  data values by row\n */\nData.getValues = ( nData ) => {\n    if( Data.values.length !== nData ) {\n        let f = d3.randomNormal( 0, 0.5 );\n        Data.values = [];\n        for( let i = 0; ( i < nData ); i++ ) {\n            let a = f(), b = f();\n            Data.values[ i ] = [ false, a, b, a * b, Math.sin( a / b )];\n        }\n    }\n    return Data.values;\n};\n\nexport default Data;\n","import Data from './Data';\n\n/**\n * Axis for scatter plot matrix in an SVG element.\n *\n * @param  {Object}  props  properties\n * @return component\n */\nconst Axis = ( props ) => {\n};\n\n/**\n * Draws the axis.\n *\n * @param  {number}  x        X coordinate, in pixels\n * @param  {number}  y        Y coordinate, in pixels\n * @param  {number}  width    width, in pixels\n * @param  {number}  height   height, in pixels\n * @param  {Element} canvas   CANVAS element\n * @param  {number}  nData    number of data values\n * @param  {number}  index    column index\n */\nAxis.draw = ( x, y, width, height, canvas, nData, index ) => {\n    \n    // Initialization.\n    let g = canvas.getContext( \"2d\" ),\n        columnNames = Data.getColumnNames();\n        \n    // Draw the column label.\n    g.fillStyle = \"#000000\";\n    g.fontSize = \"14px\";\n    let s = columnNames[ index ];\n    g.fillText( s, x + width / 2 - g.measureText( s ).width / 2, y + height - height / 2 + 4 );\n    \n    // Draw the minimum and maximum.\n    g.fontSize = \"10px\";\n    s = ( \"\" + Data.getDomain( nData, index )[ 0 ]).slice( 0, 4 );\n    g.fillText( s, x + 4, y + height - 4 );\n    s = ( \"\" + Data.getDomain( nData, index )[ 1 ]).slice( 0, 3 );\n    g.fillText( s, x + width - 3 - g.measureText( s ).width, y + 12 );\n};\n\nexport default Axis;\n","import * as d3 from 'd3';\nimport Data from './Data';\n\n/**\n * Scatter plot in an SVG element.\n *\n * @param  {Object}  props  properties\n * @return component\n */\nconst Plot = ( props ) => {\n};\n \n/**\n * Padding, in pixels.\n *\n * @constant {number}\n */\nPlot.padding = 10;\n    \n/**\n * Returns normalized rectangle.\n *\n * @param   {Rect}  rect   rectangle\n * @return  {Rect}  normalized rectangle\n */\nPlot.normalize = ( rect ) => {\n    let nx = rect.x,\n        ny = rect.y,\n        nw = rect.width,\n        nh = rect.height;\n    if( nw < 0 ) {\n        nx += nw;\n        nw = -nw;\n    }\n    if( nh < 0 ) {\n        ny += nh;\n        nh = -nh;\n    }\n    return { x: nx, y: ny, width: nw, height: nh };\n}\n\n/**\n * Returns whether point is within rectangle, within tolerance.\n *\n * @param  {Point}   point  point\n * @param  {Rect}    rect   rectangle\n * @param  {number}  tol    tolerance, or 0 for undefined\n */\nPlot.isWithin = ( point, rect, tol ) => {\n    let nRect = Plot.normalize( rect );\n    if( tol !== undefined ) {\n        nRect.x -= tol;\n        nRect.y -= tol;\n        nRect.width += 2 * tol;\n        nRect.height += 2 * tol;\n    }\n    return ( nRect.x <= point.x ) && ( point.x < nRect.x + nRect.width  ) &&\n           ( nRect.y <= point.y ) && ( point.y < nRect.y + nRect.height );\n}\n\n/**\n * Draws the plot.\n *\n * @param  {number}               x             X coordinate, in pixels\n * @param  {number}               y             Y coordinate, in pixels\n * @param  {number}               width         width, in pixels\n * @param  {number}               height        height, in pixels\n * @param  {Element}              canvas        CANVAS element\n * @param  {number}               nData         number of data values\n * @param  {number}               i             X column index\n * @param  {number}               j             Y column index\n * @param  {number}               opacity       alpha\n * @param  {ImageData|undefined}  imageData     bitmap of deselected points, or undefined if none\n * @param  {number[]|undefined}   selectedRows  Array of indices of selected rows, or undefined if none\n * @return {ImageData}            bitmap of deselected points\n */\nPlot.draw = ( x, y, width, height, canvas, nData, i, j, opacity, imageData, selectedRows ) => {\n    \n    // Initialization.\n    const g = canvas.getContext( \"2d\" ),\n        padding = Plot.padding;\n    let data = Data.getValues( nData ),\n        xScale = d3.scaleLinear().domain( Data.getDomain( nData, i )).range([ x + padding, x + width - padding ]),\n        yScale = d3.scaleLinear().domain( Data.getDomain( nData, j )).range([ y + height - padding, y + padding ]),\n        deselectedImageData = imageData;\n        \n    // Create the deselected bitmap if necessary.\n    // For alpha blending, see e.g. https://en.wikipedia.org/wiki/Alpha_compositing#Alpha_blending.\n    if( deselectedImageData === undefined ) {\n        deselectedImageData = g.createImageData( width, height );                           // black and transparent\n        const d = deselectedImageData.data;\n        data.forEach(( datum ) => {\n            let xScaled = xScale( datum[ i ]) - x,\n                yScaled = yScale( datum[ j ]) - y;\n            if(( 0 <= xScaled ) && ( xScaled < width ) && ( 0 <= yScaled ) && ( yScaled < height )) {\n                let k = Math.floor( yScaled ) * ( width * 4 ) + Math.floor( xScaled ) * 4;\n                d[ k     ] = Math.round(             0 + d[ k     ] * ( 1 - opacity ));     // r\n                d[ k + 1 ] = Math.round(             0 + d[ k + 1 ] * ( 1 - opacity ));     // g\n                d[ k + 2 ] = Math.round(             0 + d[ k + 2 ] * ( 1 - opacity ));     // b\n                d[ k + 3 ] = Math.round( 255 * opacity + d[ k + 3 ] * ( 1 - opacity ));     // alpha\n            }\n        });\n    }\n    \n    // Make a local copy.\n    let myImageData = g.createImageData( width, height );\n    myImageData.data.set( deselectedImageData.data );\n    const d = myImageData.data;\n    \n    // Selected rows use opacity, but not alpha blending, in order to keep them bright.  TODO:  Explore alternatives to this.\n    // Add the selected rows as specified...\n    if( selectedRows !== undefined ) {\n        selectedRows.forEach(( row ) => {\n            let xScaled = xScale( data[ row ][ i ]) - x,\n                yScaled = yScale( data[ row ][ j ]) - y;\n            if(( 0 <= xScaled ) && ( xScaled < width ) && ( 0 <= yScaled ) && ( yScaled < height )) {\n                let k = Math.floor( yScaled ) * ( width * 4 ) + Math.floor( xScaled ) * 4;\n                d[ k ] = Math.round( 255 + d[ k ] * ( 1 - opacity ));                       // r\n            }\n        });\n    }\n    \n    // ...or add the selected rows from the data.\n    else {\n        let row = 0;\n        data.forEach(( datum ) => {\n            if( Data.isSelected[ row ]) {\n                let xScaled = xScale( datum[ i ]) - x,\n                    yScaled = yScale( datum[ j ]) - y;\n                if(( 0 <= xScaled ) && ( xScaled < width ) && ( 0 <= yScaled ) && ( yScaled < height )) {\n                    let k = Math.floor( yScaled ) * ( width * 4 ) + Math.floor( xScaled ) * 4;\n                    d[ k ] = Math.round( 255 + d[ k ] * ( 1 - opacity ));                   // r\n                }\n            }\n            row++;\n        });\n    }\n    \n    // Draw and return the bitmap.\n    g.putImageData( myImageData, x, y, padding, padding, width - 2 * padding, height - 2 * padding );\n    return deselectedImageData;\n};\n\n/**\n * Selects rows within the brush and returns them.\n *\n * @param  {number}    x       X coordinate, in pixels\n * @param  {number}    y       Y coordinate, in pixels\n * @param  {number}    width   width, in pixels\n * @param  {number}    height  height, in pixels\n * @param  {number}    nData   number of data values\n * @param  {number}    i       X column index\n * @param  {number}    j       Y column index\n * @param  {Rect}      brush   brush\n * @return {number[]}  Array of indices of selected rows, or undefined if none\n */\nPlot.select = ( x, y, width, height, nData, i, j, brush ) => {\n    \n    // Initialization.\n    const padding = Plot.padding;\n    let selectedRows = [],\n        data = Data.getValues( nData ),\n        xScale = d3.scaleLinear().domain( Data.getDomain( nData, i )).range([ x + padding, x + width - padding ]),\n        yScale = d3.scaleLinear().domain( Data.getDomain( nData, j )).range([ y + height - padding, y + padding ]),\n        xMin = xScale.invert( Math.min( brush.x, brush.x + brush.width )),\n        xMax = xScale.invert( Math.max( brush.x, brush.x + brush.width )),\n        yMin = yScale.invert( Math.max( brush.y, brush.y + brush.height )),\n        yMax = yScale.invert( Math.min( brush.y, brush.y + brush.height ));\n    \n    // Select the rows and return them.\n    let row = 0;\n    data.forEach(( datum ) => {\n        Data.isSelected[ row ] = ( xMin <= datum[ i ]) && ( datum[ i ] < xMax ) && ( yMin <= datum[ j ]) && ( datum[ j ] < yMax );\n        if( Data.isSelected[ row ]) {\n            selectedRows.push( row );\n        }\n        row++;\n    });\n    return selectedRows;\n};\n\nexport default Plot;\n","import React, { useRef, useEffect }  from 'react';\nimport * as d3 from 'd3';\nimport Data from './Data';\nimport Axis from './Axis';\nimport Plot from './Plot';\nimport './Matrix.css';\n\n/**\n * @typedef  Point  point\n *\n * @type  {object}\n * @property  {number}   x        X coordinate, in pixels\n * @property  {number}   y        Y coordinate, in pixels\n */\n\n/**\n * @typedef  Rect  rectangle\n *\n * @type  {object}\n * @property  {number}   x        X coordinate, in pixels\n * @property  {number}   y        Y coordinate, in pixels\n * @property  {number}   width    width, in pixels\n * @property  {number}   height   height, in pixels\n */\n\n/**\n * Scatter plot matrix in an SVG element.\n *\n * @param  {Object}  props  properties\n * @return component\n */\nconst Matrix = ( props ) => {\n    \n    // Initialization.\n    const ref = useRef(),\n        { nData, opacity } = props,\n        width = 200,\n        height = 200,\n        nColumns = Data.getColumnNames().length,\n        totalWidth = ( nColumns - 1 ) * width,\n        totalHeight = ( nColumns - 1 ) * height;\n    \n    // Set hook to select and draw on mounting.\n    useEffect(() => {\n        \n        // Create the matrix (after https://observablehq.com/@d3/brushable-scatterplot-matrix?collection=@d3/d3-brush).\n        const svg = d3.select( ref.current.childNodes[ 1 ]);\n        svg.selectAll( \"*\" ).remove();\n        const cell = svg.append( \"g\" )\n            .selectAll( \"g\" )\n            .data( d3.cross(d3.range( nColumns - 1 ), d3.range( nColumns - 1 )))\n            .join( \"g\" )\n            .attr( \"transform\", ([ i, j ]) => `translate(${ i * width },${ j * height })` );\n            \n        // Create the brush.\n        const onStart = ( event ) => {\n            if( !event.sourceEvent ) {\n                return;\n            }\n            const target = event.sourceEvent.target.parentNode;\n            if( Matrix.brushNode !== target ) {\n                d3.select( Matrix.brushNode ).call( brush.move, null );\n                Matrix.brushNode = target;\n            }\n            Matrix.selectedRows = [];\n            Data.deselectAll();\n        };\n        const onBrush = ( event ) => {\n            Matrix.selectedRows = [];\n            Data.deselectAll();\n            if( event.selection ) {\n                let offsetX = event.sourceEvent ? event.sourceEvent.offsetX : 400,\n                    offsetY = event.sourceEvent ? event.sourceEvent.offsetY : 200,\n                    xDown = event.selection[ 0 ][ 0 ],\n                    yDown = event.selection[ 0 ][ 1 ],\n                    xUp = event.selection[ 1 ][ 0 ],\n                    yUp = event.selection[ 1 ][ 1 ],\n                    i = Math.floor( offsetX / width ),\n                    j = Math.floor( offsetY / height ),\n                    x = i * width,\n                    y = j * height;\n                Matrix.selectedRows = ( i === j ) ? [] : Plot.select( x, y, width, height, nData, i + 1, j + 1, { x: x + xDown, y: y + yDown, width: xUp - xDown, height: yUp - yDown });\n            }\n            Matrix.draw( width, height, ref, nData, opacity );\n        };\n        const brush = d3.brush()\n            .extent([[ 2, 2 ], [ width, height ]])\n            .on( \"start\", onStart )\n            .on( \"brush end\", onBrush );\n        cell.call( brush );\n        Matrix.brush = brush;\n        \n        // Initialize the brush.\n        Matrix.brushNode = svg.node().firstChild.childNodes[ 9 ];\n        const brushCell = d3.select( Matrix.brushNode );\n        brushCell.call( brush.move, [[ 60, 60 ], [ 100, 100 ]]);\n    });\n    \n    // Return the component.\n    return <div ref={ref}><canvas width={totalWidth} height={totalHeight}></canvas><svg width={totalWidth} height={totalHeight}></svg></div>;\n};\n\n/**\n * Bitmaps of deselected rows, cached for optimization, or undefined if none.\n *\n * @type {ImageData[][]|undefined}\n */\nMatrix.bitmaps = undefined;\n \n/**\n * Array of indices of selected rows, cached for optimization.\n *\n * @type {number[]}\n */\nMatrix.selectedRows = [];\n \n/**\n * Brush, or undefined if none.\n *\n * @type {d3.brush|undefined}\n */\nMatrix.brush = undefined;\n \n/**\n * Node containing a brush, or undefined if none.\n *\n * @type {Node|undefined}\n */\nMatrix.brushNode = undefined;\n\n/**\n * Clears data structures.\n */\nMatrix.clear = () => {\n    Matrix.selectedRows = [];\n    Data.deselectAll();\n    Matrix.bitmaps = undefined;\n};\n\n/**\n * Draws the plots.\n *\n * @param  {number}  width    width in pixels\n * @param  {number}  height   height in pixels\n * @param  {Object}  ref      reference to DIV\n * @param  {number}  nData    number of data values\n * @param  {number}  opacity  alpha\n */\nMatrix.draw = ( width, height, ref, nData, opacity ) => {\n    \n    // Initialization.  If no context, do nothing.\n    if( !ref ) {\n        return;\n    }\n    let canvas = ref.current.firstChild,\n        g = canvas.getContext( \"2d\" ),\n        nColumns = Data.getColumnNames().length;\n    if( !g ) {\n        return;\n    }\n    \n    // Erase the drawing area.\n    g.clearRect( 0, 0, ( nColumns - 1 ) * width, ( nColumns - 1 ) * height );\n    \n    // Draw the grid.\n    g.strokeStyle = \"#939ba1\";\n    for( let i = 1; ( i < nColumns - 1 ); i++ ) {\n        g.moveTo( i * width + 0.5, 0 );\n        g.lineTo( i * width + 0.5, ( nColumns - 1 ) * height );\n        g.moveTo( 0, i * height + 0.5 );\n        g.lineTo(( nColumns - 1 ) * width, i * height + 0.5 );\n    }\n    g.stroke();\n    \n    // Draw the plots and the axes.  On first draw, store the bitmaps.\n    let isFirstDraw = !Matrix.bitmaps;\n    if( isFirstDraw ) {\n        Matrix.bitmaps = [];\n    }        \n    for( let i = 1; ( i < nColumns ); i++ ) {\n        for( let j = 1; ( j < nColumns ); j++ ) {\n\n            // Get the position.\n            let x = ( i - 1 ) * width,\n                y = ( j - 1 ) * height;\n\n            // Draw an axis...\n            if( i === j ) {\n                Axis.draw( x, y, width, height, canvas, nData, i );\n            }\n\n            // ...or a plot.\n            else {\n                if( isFirstDraw ) {\n                    if( Matrix.bitmaps[ i - 1 ] === undefined ) {\n                        Matrix.bitmaps[ i - 1 ] = [];\n                    }\n                    Matrix.bitmaps[ i - 1 ][ j - 1 ] =\n                        Plot.draw( x, y, width, height, canvas, nData, i, j, opacity, undefined, Matrix.selectedRows );\n                } else {\n                    Plot.draw( x, y, width, height, canvas, nData, i, j, opacity, Matrix.bitmaps[ i - 1 ][ j - 1 ], Matrix.selectedRows );\n                }\n            }\n        }\n    }\n};\n\nexport default Matrix;\n","export default __webpack_public_path__ + \"static/media/cleveland.934d3552.png\";","export default __webpack_public_path__ + \"static/media/tukey.a9cb1dea.png\";","import React, { useState } from 'react';\nimport { Slider } from '@mui/material';\nimport Matrix from './Matrix';\nimport './App.css';\nimport cleveland from './cleveland.png';\nimport tukey from './tukey.png';\n\n// Application:  Optimized Brushing\nconst App = () => {\n    \n    // Create state.\n    const nDataDefault = 12;\n    const [ nData, setNData ] = useState( App.getPower( nDataDefault ));\n    const [ opacity, setOpacity ] = useState( 0.5 );\n    \n    // Return the component.\n    return (\n        <div className=\"Column\">\n            <div className=\"Description\">\n                <h1>Optimized Brushing</h1>\n                <p>\n                Brushing is a basic technique of exploratory data analysis, developed in the 1970s and 1980s.  Back then, analysts were happy to brush a few hundred points.  On modern hardware, we can brush many more.\n                </p>\n                <p>\n                Drag the brush to select the points.  Drag the edges to resize the brush.  Drag a rectangle in any plot to create a new brush.\n                </p>\n                <p>\n                Use the sliders to adjust the number of points and their transparency.\n                </p>\n                <Matrix nData={nData} opacity={opacity} />\n                <br />\n            </div>\n            <div className=\"GridControls\">\n                <label>Points per Plot:</label>\n                <Slider defaultValue={ nDataDefault } step={ 1 } min={ 6 } max={ 15 }\n                    valueLabelDisplay=\"auto\" marks valueLabelFormat={( value ) => { let s = App.getPower( value ); if( s >= 10000 ) s = s / 1000 + \"K\"; return s }}\n                    onChangeCommitted={( event, value ) => { Matrix.clear(); setNData( App.getPower( value )); }} />\n                <span/>\n                <label>Transparency:</label>\n                <Slider defaultValue={ 0.5 } step={ 0.01 } min={ 0 } max={ 0.99 }\n                    valueLabelDisplay=\"auto\"\n                    onChangeCommitted={( event, value ) => { Matrix.clear(); setOpacity( 1 - value ); }} />\n            </div>\n            <div className=\"Description\">\n                <h2>Design Notes</h2>\n                <p>\n                Parts of this implementation derive from code in <a href=\"https://observablehq.com/collection/@d3/d3-brush\">the d3-brush collection</a>.\n                </p>\n                <p>\n                This design derives from the <a href=\"http://www.sci.utah.edu/~kpotter/Library/Papers/becker:1987:BS/index.html\">scatter plot matrix</a> of (Becker and Cleveland, 1987).  Dr. Werner Stuetzle published his similar <a href=\"https://sites.stat.washington.edu/people/wxs/Visualization-papers/plot-windows.pdf\">\"Plot Windows\"</a> in the same year (Stuetzle, 1987).\n                </p>\n                <p className=\"center\">\n                    <a href=\"https://www.cerias.purdue.edu/site/people/faculty/view/709\"><img alt=\"Dr. William Cleveland\" src={cleveland}/></a>\n                    <br />\n                </p>\n                <p>\n                Both systems built on the work of <a href=\"https://www.stat.berkeley.edu/~brill/Papers/life.pdf\">John Tukey</a> and colleagues a decade earlier (Fishkeller, Friedman, and Tukey, 1974).  The <a href=\"https://www.youtube.com/watch?v=B7XoW2qiFUA\">PRIM-9 video</a> shows how much these researchers achieved with the hardware available at the time.\n                </p>\n                <p className=\"center\">\n                    <a href=\"https://www.stat.berkeley.edu/~brill/Papers/life.pdf\"><img alt=\"Dr. John Tukey\" src={tukey}/></a>\n                    <br />\n                </p>\n                <p>\n                These systems were limited to small data sets, but their designers knew that Moore's Law was on their side.  They knew that computer hardware would eventually support much larger explorations.\n                </p>\n                <p>\n                To minimize distraction, the scatter plot matrix displays no axes, but only data ranges.  This follows Tufte's \"Data-Ink Ratio\" (Tufte, 1983).  Axes aren't needed, because the goal is not to show locations of points, but to find patterns in the data.\n                </p>\n                <p>\n                For the same reason, colors are chosen to emphasize the data.   Black on white gives maximum emphasis.  The red selection color draws attention.  The grid, being less important, is gray.\n                </p>\n                <p>\n                Usability tests pointed out that the brush should be blue, the standard selection color (Ho, 2016).  Following standards eases the user's learning curve:  this blue object makes selections, like all the others.\n                </p>\n                <p>\n                Using d3's implementation, the brush is <em>persistent</em> rather than <em>transient</em>.  A persistent brush reduces errors, by enabling the user to resize the brush (Tidwell, 2010).  A persistent brush also helps users share the paths of their explorations, e.g. through screen shots.\n                </p>\n                <p>\n                Modern hardware enables transparency to show density (Wegman and Luo, 2002).  This gives scatter plots the power of contour plots, while still displaying individual points.\n                </p>\n                <p>\n                The following optimizations improve performance:\n                </p>\n                <ol>\n                <li>CANVAS avoids the need to create many SVG objects.</li>\n                <li>Each data point is shown as a single pixel, using transparency to show density, to minimize drawing code.</li>\n                <li>Deselected points are cached, so drawing a plot requires only a fast copy, then drawing the selected points.</li>\n                <li>Selected points are cached, so drawing iterates over a short list, not the entire data set.</li>\n                </ol>\n                <p>\n                Performance varies, but a fast box can display 100,000 points per plot.  So a 4x4 matrix can brush 1.2 million points.\n                </p>\n                <br/>\n                <h2>References</h2>\n                <ul>\n                    <li>Becker, R. and Cleveland, W. (1987). \"Brushing Scatterplots\". Technometrics. 29 (2): 127-142. <a href=\"https://doi.org/10.2307/1269768\">https://doi.org/10.2307/1269768</a>.</li><br/>\n                    <li>Fishkeller, Friedman, and Tukey (1974). “PRIM-9: An Interactive Multidimensional Data Display and Analysis System” SLAC-PUB-1408. Stanford, CA: Stanford Linear Accelerator Center. <a href=\"https://www.researchgate.net/publication/245345268_An_interactive_multidimensional_data_display_and_analysis_system\">https://www.researchgate.net/publication/245345268_An_interactive_multidimensional_data_display_and_analysis_system</a>.</li><br/>\n                    <li>Ho, Y. (2016). Personal communication. <a href=\"https://www.linkedin.com/in/yang-ho-94b14860/\">https://www.linkedin.com/in/yang-ho-94b14860/</a></li><br/>\n                    <li>Stuetzle, W. (1987). \"Plot Windows\". Journal of the American Statistical Association. 82 (398): 466-475. <a href=\"https://sites.stat.washington.edu/people/wxs/Visualization-papers/plot-windows.pdf\">https://sites.stat.washington.edu/people/wxs/Visualization-papers/plot-windows.pdf</a>.</li><br/>\n                    <li>Tidwell, J. (2010). Designing Interfaces: Patterns for Effective Interaction Design, Second Edition, 312-314 Sebastopol CA: O'Reilly Media. <a href=\"https://www.oreilly.com/library/view/designing-interfaces-3rd/9781492051954/\">https://www.oreilly.com/library/view/designing-interfaces-3rd/9781492051954/</a>.</li><br/>\n                    <li>Tufte, E. (1983). The Visual Display of Quantitative Information, First Edition, 91-105.  Cheshire CN: Graphics Press. <a href=\"https://www.edwardtufte.com/tufte/\">https://www.edwardtufte.com/tufte/.</a></li><br/>\n                    <li>Wegman, E. and Luo, Q. (2002). \"On Methods of Computer Graphics for Visualizing Densities\". Journal of Computational and Graphical Statistics 11, (1), 137-162. <a href=\"https://doi.org/10.1198/106186002317375659\">https://doi.org/10.1198/106186002317375659</a>.</li><br/>\n\n                </ul>\n            </div>\n            <a href=\"https://github.com/hemanrobinson/brush/\">Code Shared on GitHub</a>\n        </div>\n    );\n}\n\n/**\n * Returns \"nice\" power of ten:  rounded to 1, 2, 5, 10, 20, 50, etc.\n *\n * @param  {number}  exp  exponent\n * @return {number}  \"nice\" power of ten:  rounded to 1, 2, 5, 10, 20, 50, etc.\n */\nApp.getPower = ( exp ) => {\n    let m = (( exp % 3 ) === 0 ) ? 1 : (( exp % 3 ) === 1 ) ? 2 : 5;\n    return m * ( 10 ** Math.floor( exp / 3 ));\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n// Render the app.\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById( 'root' )\n);\n"],"sourceRoot":""}